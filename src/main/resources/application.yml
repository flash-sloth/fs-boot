fs:
  cache:
    type: REDIS
  redis:
    ip: 127.0.0.1
    port: 16379
    password: 'SbtyMveYNfLzTks7H0apCmyStPzWJqjy'
    database: 1
  mysql: &db-mysql
    db-type: mysql
    validation-query: SELECT 'x'
    filters: stat,wall
    username: 'root'
    password: 'root'
    driverClassName: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/lamp_column?serverTimezone=Asia/Shanghai&characterEncoding=utf8&useUnicode=true&useSSL=false&autoReconnect=true&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true&nullCatalogMeansCurrent=true
  database: # 字段介绍参考 DatabaseProperties
    # COLUMN模式中隔离 租户 的列名
    tenantIdColumn: 'tenant_id'
    # 是否不允许写入数据  WriteInterceptor
    isNotWrite: false
    # 生产环境请设置p6spy = false
    p6spy: true
    plus:
      maxLimit: -1
      overflow: true
      optimizeJoin: true
      # 是否启用  sql性能规范插件
      isBlockAttack: false
      isIllegalSql: false
    flex:
      audit: true
    # id生成策略
    id-type: CACHE
    hutoolId:
      workerId: 0
      dataCenterId: 0
    cache-id:
      time-bits: 31
      worker-bits: 22
      seq-bits: 10
      epochStr: '2020-09-15'
      boost-power: 3
      padding-factor: 50
  feign:
    # xxl-job-admin 的地址
    job-server: http://127.0.0.1:8767
  scan:
    enabled: true
    basePackage: top.fsfsfs
  authentication:
    expire: 28800               # token有效期为8小时
    refreshExpire: 86400        # 刷新token有效期为24小时
    # jwt 签名，长度至少32位。 建议每个公司都修改一下这个字符串
    jwtSignKey: 'fsfsfs-cloud_is_a_fantastic_project'
  system:
    # 登录时否验证密码有效性 （常用于开发环境快速登录）
    verifyPassword: true
    # 登录时否验证验证码有效性 （常用于开发环境快速登录）
    verifyCaptcha: true
    # 默认用户密码
    defPwd: '123456'
    # 密码最大输错次数  小于0不限制
    maxPasswordErrorNum: 10
    # 密码错误锁定用户时间  除了0表示锁定到今天结束，还支持m、h、d、w、M、y等单位
    passwordErrorLockUserTime: '0'
    # log记录
    recordLog: true
    recordArgs: true
    recordResult: true
    # 缓存Key前缀
    cachePrefix: lc
    # oauth 服务扫描枚举类的包路径
    enumPackage: "top.fsfsfs"
  ignore:
    # 是否启用网关的 uri权限鉴权 (设置为false，则后台不校验访问权限)
    authEnabled: true
    # 前端校验按钮 是否区分大小写
    caseSensitive: false
    anyone: # 请求中 需要携带Tenant 且 需要携带Token(不需要登录)，但不需要验证uri权限
      ALL:
        - /**/anyone/**
        - /service/model/*/json
        - /service/model/*/save
        - /service/editor/stencilset
    anyUser: # 请求中 需要携带Tenant，但 不需要携带Token(不需要登录) 和 不需要验证uri权限
      ALL:
        - /**/anyUser/**
    anyTenant: # 请求中 不需要携带Tenant 且 不需要携带Token(不需要登录) 和 不需要验证uri权限
      ALL:
        - /**/anyTenant/**
  echo: #详情看: EchoProperties
    # 是否启用 远程数据 注解AOP注入
    aop-enabled: true
    # 字典类型 和 code 的分隔符
    dictSeparator: '###'
    # 多个字典code 之间的的分隔符
    dictItemSeparator: ','
    # 递归最大深度
    maxDepth: 3
    # 本地缓存配置信息 生产慎用
    guavaCache:
      enabled: false
      maximumSize: 1000
      refreshWriteTime: 2
      refreshThreadPoolSize: 10
  webmvc:
    undertow: true
    header: false
  log: # 详情看：OptLogProperties
    # 开启记录操作日志
    enabled: true
    # 记录到什么地方  DB:mysql LOGGER:日志文件
    type: DB
  xss:
    # 是否开启 xss 过滤器  详情看：XssProperties
    enabled: true
    # 是否启用 RequestBody 注解标记的参数 反序列化时过滤XSS
    requestBodyEnabled: false
    ignoreParamValues:
      - noxss
  captcha:
    # 登录界面的验证码配置 详情看：CaptchaProperties
    type: ARITHMETIC
    width: 158
    height: 58
    len: 2
    charType: 2
  async: # 全局线程池配置
    corePoolSize: 2
    maxPoolSize: 50
    queueCapacity: 10000
    keepAliveSeconds: 300
    threadNamePrefix: 'fs-async-executor-'
  swagger:
    license: Powered By flash-sloth
    licenseUrl: https://github.com/flash-sloth
    termsOfServiceUrl: https://github.com/flash-sloth
    version: @project.version@
    contact: # 联系人信息
      url: https://github.com/flash-sloth
      name: tangyh
      email: 244387066@qq.com
    global-operation-parameters: # 全局参数
      - name: Token
        description: 用户信息
        modelRef: String
        parameterType: header
        required: true
        # 默认值只是方便本地开发时，少填参数，生产环境请禁用swagger或者禁用默认参数
        defaultValue: "test"
      - name: Authorization
        description: 客户端信息
        modelRef: String
        parameterType: header
        required: true
        defaultValue: "bGFtcF93ZWI6bGFtcF93ZWJfc2VjcmV0"
      - name: TenantId
        description: 租户ID
        modelRef: String
        parameterType: header
        required: true
        defaultValue: "1"
  file:
    storageType: LOCAL  #  FAST_DFS LOCAL MIN_IO ALI_OSS HUAWEI_OSS QINIU_OSS
    delFile: false
    suffix: doc,docx,gif,jpeg,jpg,pdf,png,rar,zip,xls,xlsx,txt,file,bin,egp,egpx,apk,xml,rpx,rpg,html,htm,wps,xbid,db
    local:
      storage-path: ./logs/file/     # 文件存储路径  （ 某些版本的 window 需要改成  D:\\data\\projects\\uploadfile\\file\\  ）
      urlPrefix: http://127.0.0.1/file/   # 文件访问 （部署nginx后，配置nginx的ip，并配置nginx静态代理storage-path地址的静态资源）
      innerUrlPrefix: null  #  内网的url前缀
    fastDfs:
      urlPrefix: http://fastdfs.fsfsfs.top/
    ali:
      # 请填写自己的阿里云存储配置
      urlPrefix: "http://fsfsfs.oss-cn-beijing.aliyuncs.com/"
      bucket: "fs_dev"
      endpoint: "oss-cn-beijing.aliyuncs.com"
      access-key-id: "填写你的id"
      access-key-secret: "填写你的秘钥"
    minIo:
      endpoint: "http://127.0.0.1:9000/"
      accessKey: "fs"
      secretKey: "fs"
      bucket: "dev"
    huawei:
      urlPrefix: "dev.obs.cn-southwest-2.myhuaweicloud.com"
      endpoint: "obs.cn-southwest-2.myhuaweicloud.com"
      accessKey: "1"
      secretKey: "2"
      location: "cn-southwest-2"
      bucket: "dev"
    qiNiu:
      zone: "z0"
      accessKey: "1"
      secretKey: "2"
      bucket: "fs_dev"

#FAST_DFS配置
fdfs:
  soTimeout: 1500
  connectTimeout: 600
  thumb-image:
    width: 150
    height: 150
  tracker-list:
    - 39.108.109.234:22122
  pool:
    #从池中借出的对象的最大数目
    max-total: 153
    max-wait-millis: 102
    jmx-name-base: 1
    jmx-name-prefix: 1



spring:
  cache:
    type: GENERIC
  data:
    redis:
      host: ${fs.redis.ip}
      password: ${fs.redis.password}
      port: ${fs.redis.port}
      database: ${fs.redis.database}
#  autoconfigure:
#    exclude: org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      enable: true
      <<: *db-mysql
      # <<: *db-sqlserver
      # <<: *db-oracle
      initialSize: 10
      minIdle: 10
      maxActive: 200
      max-wait: 60000
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      test-on-borrow: false
      test-on-return: false
      test-while-idle: true
      time-between-eviction-runs-millis: 60000  #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      min-evictable-idle-time-millis: 300000    #配置一个连接在池中最小生存的时间，单位是毫秒
      filter:
        wall:
          enabled: true
          config:
            strictSyntaxCheck: false
            commentAllow: true
            multiStatementAllow: true
            noneBaseStatementAllow: true
        slf4j:
          enabled: false       # 使用slf4j打印可执行日志时，改成true
          statement-executable-sql-log-enable: true  # 打印类似 p6spy 的可执行SQL 日志

      # 以下的2段配置，同时适用于所有模式
      web-stat-filter: # WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter
        enabled: true
        url-pattern: /*
        exclusions: "*.js , *.gif ,*.jpg ,*.png ,*.css ,*.ico , /druid/*"
        session-stat-max-count: 1000
        profile-enable: true
        session-stat-enable: false
      stat-view-servlet: #展示Druid的统计信息,StatViewServlet的用途包括：1.提供监控信息展示的html页面2.提供监控信息的JSON API
        enabled: true
        url-pattern: /druid/*   #根据配置中的url-pattern来访问内置监控页面，如果是上面的配置，内置监控页面的首页是/druid/index.html例如：http://127.0.0.1:9000/druid/index.html
        reset-enable: true    #允许清空统计数据
        login-username: ''
        login-password: ''
        allow: ''
  mvc:
    pathmatch:
      # 升级springboot2.6.6后临时处理，防止swagger报错
      matching-strategy: ANT_PATH_MATCHER
  lifecycle:
    # 优雅停机宽限期时间
    timeout-per-shutdown-phase: 30s
  servlet:
    # 上传文件最大值
    multipart:
      max-file-size: 512MB
      max-request-size: 512MB
  freemarker:
    suffix: .ftl
    cache: false
    charset: UTF-8
    contentType: text/html
    requestContextAttribute: ctx
    templateEncoding: UTF-8
    templateLoaderPath: classpath:/
    settings:
      defaultEncoding: UTF-8
      url_escaping_charset: UTF-8
      locale: zh_CN

# knife4j 文档通用配置 详情看: Knife4jProperties
knife4j:
  enable: true
  setting:
    enableReloadCacheParameter: true
    enableVersion: true
    enableDynamicParameter: true
    enableFooter: false
    enableFooterCustom: true
    footerCustomContent: Apache License 2.0 | Copyright  2024 [flash-sloth](https://github.com/flash-sloth)

springdoc:
  group-configs:
    - group: 'fs-boot'
      displayName: '单体版'
      paths-to-match: '/**'
      packages-to-scan: top.fsfsfs.boot

server:
  port: 18760
  # 优雅停机
  shutdown: GRACEFUL
  servlet:
    encoding:
      enabled: true
      charset: UTF-8
      force: true
  undertow:
    threads:
      io: 4 # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
      worker: 80  # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载
    buffer-size: 2048  # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理 , 每块buffer的空间大小,越小的空间被利用越充分
    direct-buffers: true  # 是否分配的直接内存

management:
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: ALWAYS
      enabled: true

mybatis-plus:
  mapper-locations:
    - classpath*:mapper_**/**/*Mapper.xml
  #实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: top.fsfsfs.boot.*.entity;top.fsfsfs.basic.database.mybatis.typehandler
  typeEnumsPackage: top.fsfsfs.boot.*.enumeration
  global-config:
    db-config:
      id-type: INPUT
      insert-strategy: NOT_NULL
      update-strategy: NOT_NULL
      where-strategy: NOT_EMPTY
  configuration:
    #配置返回数据库(column下划线命名&&返回java实体是驼峰命名)，自动匹配无需as（没开启这个，SQL需要写as： select user_id as userId）
    map-underscore-to-camel-case: true
    cache-enabled: false
    #配置JdbcTypeForNull, oracle数据库必须配置
    jdbc-type-for-null: 'null'
    default-enum-type-handler: top.fsfsfs.basic.mybatisplus.mybatis.handlers.MybatisEnumTypeHandler

mybatis-flex:
  mapper-locations:
    - classpath*:/mapper/**/*.xml
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
    jdbc-type-for-null: null
    auto-mapping-unknown-column-behavior: none
    auto-mapping-behavior: full
  global-config:
    deleted-value-of-logic-delete: "1"
    normal-value-of-logic-delete: "0"
    key-config:
      before: true
      key-type: generator
      value: 'uid'